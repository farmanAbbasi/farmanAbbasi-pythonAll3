const express = require('express');
const app = express();
const path = require('path');
const bodyParser = require("body-parser");
const http = require('http');
const server = http.Server(app);

const multer = require("multer");
const { memoryStorage } = require("multer");
const {Storage}  = require("@google-cloud/storage");

var bucketName = "";
const keyFile = "";
const project="";

// Instantiate a storage client
const googleCloudStorage = new Storage({
    projectId: project,
    keyFilename: keyFile
});
// Multer is required to process file uploads and make them available via
// req.files.
const m = multer({
    storage: memoryStorage(),
    limits: {
        fileSize: 5 * 1024 * 1024 // no larger than 5mb
    }
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(function (req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
    next();
});
app.use(express.static(path.join(__dirname, "chatbot")));






// A bucket is a container for objects (files).
const bucket = googleCloudStorage.bucket(bucketName);

// app.use('/api', api);
app.get('/', function (req, res) {
    res.sendFile(path.join(__dirname + '/chatbot/index.html'));
});

// Process the file upload and upload to Google Cloud Storage.
app.post("/upload", m.single("fileNameSameBothInMulterAndAngular"), (req, res, next) => {
    console.log(req.body.env)//the env test or prod
    if (!req.file) {
        res.status(400).send("No file uploaded.");
        return;
    }
    fileName=req.file.originalname;
    // Create a new blob in the bucket and upload the file data.
    const blob = bucket.file(fileName);

    // Make sure to set the contentType metadata for the browser to be able
    // to render the image instead of downloading the file (default behavior)
    const blobStream = blob.createWriteStream({
        metadata: {
            contentType: req.file.mimetype
        }
    });

    blobStream.on("error", err => {
        next(err);
        console.log("error",err)
        return;
    });

    blobStream.on("finish", () => {
        // The public URL can be used to directly access the file via HTTP.
       // const publicUrl = `https://storage.googleapis.com/${bucket.name}/${blob.name}`;
        // Make the image public to the web (since we'll be displaying it in browser)
        // blob.makePublic().then(() => {
        //   res.status(200).send(`Success!\n Image uploaded to ${publicUrl}`);
        // });
        // res.status(200).send(`Success!\n Image uploaded to ${bucketName}`);
    });

    blobStream.end(req.file.buffer);
    var final={"message":"Successfully Uploaded "+fileName}
    console.log(final)
    res.status(200).send(final);
});

server.listen(2015, function () {
    console.log('Server running at *:2015');
});
